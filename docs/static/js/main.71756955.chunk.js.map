{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","gif","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","img","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAYaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC7BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,QAM9C,SACE,uBACEC,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QAiBnBG,YAAY,qC,+BClCPC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,0DAE0CC,UAAUH,GAFpD,sDAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAICA,EAAKC,OAJN,uBAIbC,EAJa,EAIbA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAThB,kBAadM,GAbc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGxB,ECL0B,SAACA,GAE3B,MAA0Bf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAbAC,qBAAW,WAETxB,EAAQC,GAAUwB,MAAM,SAAAhB,GAEtBc,EAAS,CACPf,KAAMC,EACNY,SAAS,SAKZ,CAACpB,IAEGqB,EDhB0BI,CAAazB,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACE,gCACE,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAI,SAAAiB,GACT,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIf,aEQ1BgB,EAtBM,WAEnB,MAAoC1C,mBAAU,CAAC,iBAA/C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAGA,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,6BAEIS,EAAWgB,KAAI,SAAAT,GACb,OAAQ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCblC4B,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.71756955.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useState } from 'react'\n\n/* \n\n- AddCategory es un componente que recibe la función de agregar categoría del componente padre.\n- AddCategory retorna un formulario que contiene un input:text y su estado(del componente) \n  cambia dependiendo del valor del input.\n- \n\n*/\n\nexport const AddCategory = ({ setCategories }) => {\n  \n  const [inputValue, setInputValue] = useState('')\n  \n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (inputValue.trim().length > 2) {\n      setCategories(categories => [inputValue, ...categories])\n    }\n  }\n\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        placeholder=\"Ingresa el nombre de un heroe\"\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","export const getGifs = async (category) => {\n  \n  const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=VIfOYcnjA4I0i2aC8Uw2j3j3WsvM7pE3`\n  const resp = await fetch(url)\n  const { data }= await resp.json()\n  const gifs = data.map( gif => {\n    return {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images.downsized_medium.url\n    }\n  })\n\n  return gifs\n  // setImages(gifs)\n  \n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n  \n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\n\nexport const GifGrid = ({ category }) => {\n\n\n  const { data:images, loading } = useFetchGifs(category)\n  \n  return (\n    <div>\n      <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n      \n      { loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n      <div className=\"card-grid\">\n        {\n          images.map(img => {\n            return <GifGridItem key={img.id} {...img} />\n          })\n        }\n      </div>\n\n    </div>\n  )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n  \n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n  \n  \n  useEffect( () => {\n    \n    getGifs(category).then( gifs => {\n      \n      setState({\n        data: gifs,\n        loading: false\n      })\n      \n    })\n\n  }, [category])\n\n  return state\n\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState( ['Black Clover'] )\n  \n\n  return (\n    <>\n      <h1>GifExpertApp</h1>\n      <hr></hr>\n      <AddCategory setCategories={ setCategories }/>\n      \n      <ol>\n        {\n          categories.map(category => {\n            return (<GifGrid key={category} category={category}/>)\n          })\n        }\n      </ol>\n    </>\n  )\n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n  <GifExpertApp/>,\n  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}